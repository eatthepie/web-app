import { FC, useState } from "react";
import Modal from "react-modal";
import { useIsMobile } from "@/hooks";
import { getModalStyles } from "@/styles";
import { Close } from "@/icons";

type TransactionStatus = "idle" | "loading" | "success" | "error";

interface TicketModalProps {
  onRequestClose: () => void;
}

const Ticket: FC<TicketModalProps> = ({ onRequestClose }) => {
  const isMobile = useIsMobile();
  const customStyles = getModalStyles(isMobile);

  const [ticketCount, setTicketCount] = useState(1);
  const [isAutoGenerated, setIsAutoGenerated] = useState(true);
  const [manualNumbers, setManualNumbers] = useState<number[]>([]);
  const [transactionStatus, setTransactionStatus] =
    useState<TransactionStatus>("idle");

  const handleTicketCountChange = (value: string) => {
    const count = parseInt(value);
    if (!isNaN(count) && count >= 1 && count <= 100) {
      setTicketCount(count);
    }
  };

  const incrementTicketCount = () => {
    if (ticketCount < 100) {
      setTicketCount(ticketCount + 1);
    }
  };

  const decrementTicketCount = () => {
    if (ticketCount > 1) {
      setTicketCount(ticketCount - 1);
    }
  };

  const handlePurchase = async () => {
    setTransactionStatus("loading");
    // Simulate transaction
    setTimeout(() => {
      setTransactionStatus(Math.random() > 0.5 ? "success" : "error");
    }, 2000);
  };

  const renderNumberInputs = () => {
    return (
      <div className="grid grid-cols-4 gap-4 mt-4">
        {[...Array(6)].map((_, index) => (
          <input
            key={index}
            type="number"
            min={1}
            max={49}
            placeholder={`Number ${index + 1}`}
            className="w-full px-3 py-2 text-sm border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            onChange={(e) => {
              const newNumbers = [...manualNumbers];
              newNumbers[index] = parseInt(e.target.value);
              setManualNumbers(newNumbers);
            }}
          />
        ))}
      </div>
    );
  };

  const renderTransactionStatus = () => {
    switch (transactionStatus) {
      case "loading":
        return (
          <div className="flex items-center justify-center mt-4">
            <svg
              className="w-5 h-5 mr-3 -ml-1 text-blue-500 animate-spin"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
            >
              <circle
                className="opacity-25"
                cx="12"
                cy="12"
                r="10"
                stroke="currentColor"
                strokeWidth="4"
              ></circle>
              <path
                className="opacity-75"
                fill="currentColor"
                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
              ></path>
            </svg>
            <span>Processing transaction...</span>
          </div>
        );
      case "success":
        return (
          <div className="flex items-center justify-center mt-4 text-green-500">
            Check
            <span>Transaction successful!</span>
          </div>
        );
      case "error":
        return (
          <div className="flex items-center justify-center mt-4 text-red-500">
            X<span>Transaction failed. Please try again.</span>
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <Modal
      id="react-modal"
      ariaHideApp={false}
      isOpen={true}
      onRequestClose={onRequestClose}
      style={customStyles}
    >
      <div className="flex justify-between items-center p-6">
        <h2 className="text-xl font-bold">Buy Tickets</h2>
        <button onClick={onRequestClose} className="text-black">
          <Close className="w-6 h-6" />
        </button>
      </div>
      <div className="space-y-6 px-6 mb-6">
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <svg
              className="w-6 h-6 mr-2"
              fill="currentColor"
              viewBox="0 0 20 20"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path d="M2 6a2 2 0 012-2h12a2 2 0 012 2v2a2 2 0 100 4v2a2 2 0 01-2 2H4a2 2 0 01-2-2v-2a2 2 0 100-4V6z" />
              <path
                fillRule="evenodd"
                d="M4 4a2 2 0 00-2 2v1h16V6a2 2 0 00-2-2H4zm0 6h16v1a2 2 0 01-2 2H4a2 2 0 01-2-2v-1zm16-4h-16v2h16V6z"
                clipRule="evenodd"
              />
            </svg>
            <span>Number of tickets:</span>
          </div>
          <div className="flex items-center space-x-2">
            <input
              type="number"
              min="1"
              max="100"
              value={ticketCount}
              onChange={(e) => handleTicketCountChange(e.target.value)}
              className="w-16 px-2 py-2 text-center border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <svg
              className="w-6 h-6 mr-2"
              enable-background="new 0 0 40 40"
              viewBox="0 0 40 40"
            >
              <g>
                <path d="M9.1,26c-0.6,0-1-0.4-1-1s0.4-1,1-1c2,0,4-0.8,5.4-2.2c0.4-0.4,1-0.4,1.4,0s0.4,1,0,1.4C14.1,25,11.6,26,9.1,26z" />
              </g>
              <g>
                <path d="M20,0C9,0,0,9,0,20c0,11,9,20,20,20c11,0,20-9,20-20C40,9,31,0,20,0z M20,38c-9.9,0-18-8.1-18-18c0-9.9,8.1-18,18-18   s18,8.1,18,18C38,29.9,29.9,38,20,38z" />
                <path d="M31.8,25.8L29,28.6c-0.2,0.2-0.5,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3c-0.4-0.4-0.4-1,0-1.4l1.1-1.1h-2.3   c-2.6,0-5-1-6.8-2.8l-5-5c-1.4-1.4-3.4-2.2-5.4-2.2c-0.6,0-1-0.4-1-1s0.4-1,1-1c2.5,0,5,1,6.8,2.8l5,5c1.5,1.4,3.4,2.2,5.4,2.2h2.3   l-1.1-1.1c-0.4-0.4-0.4-1,0-1.4c0.4-0.4,1-0.4,1.4,0l2.8,2.8C32.2,24.7,32.2,25.4,31.8,25.8z" />
                <path d="M31.8,15.7L29,18.5c-0.2,0.2-0.5,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3c-0.4-0.4-0.4-1,0-1.4l1.1-1.1h-2.3   c-2,0-4,0.8-5.4,2.2c-0.2,0.2-0.5,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3c-0.4-0.4-0.4-1,0-1.4c1.8-1.8,4.2-2.8,6.8-2.8h2.3l-1.1-1.1   c-0.4-0.4-0.4-1,0-1.4c0.4-0.4,1-0.4,1.4,0l2.8,2.8C32.2,14.6,32.2,15.3,31.8,15.7z" />
              </g>
            </svg>
            <span>Auto-generate numbers:</span>
          </div>
          <label className="flex items-center cursor-pointer">
            <div className="relative">
              <input
                type="checkbox"
                className="sr-only"
                checked={isAutoGenerated}
                onChange={() => setIsAutoGenerated(!isAutoGenerated)}
              />
              <div
                className={`block w-10 h-6 rounded-full transition-colors duration-300 ease-in-out ${
                  isAutoGenerated ? "bg-blue-500" : "bg-gray-300"
                }`}
              ></div>
              <div
                className={`absolute left-1 top-1 bg-white w-4 h-4 rounded-full transition-transform duration-300 ease-in-out ${
                  isAutoGenerated ? "transform translate-x-full" : ""
                }`}
              ></div>
            </div>
          </label>
        </div>
        {!isAutoGenerated && renderNumberInputs()}
        <div className="mt-4 text-center">
          <span className="text-sm text-gray-500">
            Total cost: {(ticketCount * 0.1).toFixed(2)} ETH
          </span>
        </div>
        <button
          onClick={handlePurchase}
          disabled={transactionStatus === "loading"}
          className="w-full px-4 py-2 text-white bg-blue-500 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Purchase Tickets
        </button>
        {renderTransactionStatus()}
      </div>
    </Modal>
  );
};

export default Ticket;
