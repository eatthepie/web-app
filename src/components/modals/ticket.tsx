import React, { useCallback, useState } from 'react'
import Modal from 'react-modal'
import { animated, useSpring } from 'react-spring'
import { parseEther } from 'viem'
import { useAccount, useBalance, usePublicClient, useWriteContract } from 'wagmi'

import { Countdown } from '@/components'
import lotteryABI from '@/contracts/LotteryABI.json'
import { useIsMobile, useLotteryInfo } from '@/hooks'
import { Close, EthereumCircle, TicketAlternative, Timer } from '@/icons'
import { getModalStyles } from '@/styles'

interface TicketModalProps {
  onRequestClose: () => void
}

const CONTRACT_ADDRESS = process.env.NEXT_PUBLIC_LOTTERY_ADDRESS as `0x${string}`

const Ticket: React.FC<TicketModalProps> = ({ onRequestClose }) => {
  const isMobile = useIsMobile()
  const customStyles = getModalStyles(isMobile)
  const { lotteryInfo } = useLotteryInfo()
  const { address } = useAccount()
  const { data: balance } = useBalance({ address })
  const publicClient = usePublicClient()

  const [ticketCount, setTicketCount] = useState(1)
  const [isAutoGenerated, setIsAutoGenerated] = useState(true)
  const [manualNumbers, setManualNumbers] = useState<number[][]>(
    Array(1).fill(Array(4).fill(0)),
  )

  const { writeContract, status: transactionStatus, reset, error } = useWriteContract()

  const handleTicketCountChange = (value: string) => {
    const count = parseInt(value)
    if (!isNaN(count) && count >= 1 && count <= 100) {
      setTicketCount(count)
      setManualNumbers(Array(count).fill(Array(4).fill(0)))
    }
  }

  const handleNumberChange = (ticketIndex: number, numberIndex: number, value: number) => {
    const newManualNumbers = [...manualNumbers]
    newManualNumbers[ticketIndex][numberIndex] = value
    setManualNumbers(newManualNumbers)
  }

  const handlePurchase = useCallback(async () => {
    if (!lotteryInfo?.ticketPrice || !address || !publicClient) return

    const ticketPrice = Number(lotteryInfo?.ticketPrice)
    const value = parseEther((ticketPrice * ticketCount).toString())

    try {
      if (ticketCount === 1) {
        const { request } = await publicClient.simulateContract({
          address: CONTRACT_ADDRESS,
          abi: lotteryABI,
          functionName: 'buyTicket',
          args: [manualNumbers[0].slice(0, 3), manualNumbers[0][3]],
          value,
          account: address,
        })
        writeContract(request)
      } else {
        const { request } = await publicClient.simulateContract({
          address: CONTRACT_ADDRESS,
          abi: lotteryABI,
          functionName: 'buyBulkTickets',
          args: [manualNumbers],
          value,
          account: address,
        })
        writeContract(request)
      }
    } catch (err) {
      console.error(err)
    }
  }, [address, lotteryInfo, manualNumbers, publicClient, ticketCount, writeContract])

  const renderNumberInputs = () => {
    return manualNumbers.map((ticket, ticketIndex) => (
      <div key={ticketIndex} className='grid grid-cols-4 gap-4 mt-4'>
        {ticket.map((number, numberIndex) => (
          <input
            key={numberIndex}
            type='number'
            min={1}
            max={49}
            value={number || ''}
            placeholder={`Number ${numberIndex + 1}`}
            className='w-full px-3 py-2 text-sm border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'
            onChange={(e) =>
              handleNumberChange(ticketIndex, numberIndex, parseInt(e.target.value))
            }
          />
        ))}
      </div>
    ))
  }

  const buttonAnimation = useSpring({
    scale: transactionStatus === 'pending' ? 1.05 : 1,
    config: { tension: 300, friction: 10 },
  })

  const fadeIn = useSpring({
    opacity: transactionStatus !== 'idle' ? 1 : 0,
    config: { duration: 200 },
  })

  const renderTransactionFeedback = () => {
    switch (transactionStatus) {
      case 'pending':
        return (
          <animated.div
            style={fadeIn}
            className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50'
          >
            <div className='bg-white p-6 rounded-lg text-center'>
              <div className='animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4'></div>
              <p className='text-xl font-bold'>Purchasing your tickets</p>
              <p>Hold on tight, luck is on its way!</p>
            </div>
          </animated.div>
        )
      case 'success':
        return (
          <animated.div
            style={fadeIn}
            className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50'
          >
            <div className='bg-white p-6 rounded-lg text-center'>
              <div className='text-5xl mb-4'>üéüÔ∏è</div>
              <p className='text-2xl font-bold mb-2'>Tickets Secured!</p>
              <p className='text-xl mb-4'>You're officially in the game.</p>
              <p>May fortune smile upon you!</p>
              <button
                onClick={onRequestClose}
                className='mt-4 px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors duration-200'
              >
                Back to Game
              </button>
            </div>
          </animated.div>
        )
      case 'error':
        return (
          <animated.div
            style={fadeIn}
            className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50'
          >
            <div className='bg-white p-6 rounded-lg text-center'>
              <div className='text-5xl mb-4'>üòï</div>
              <p className='text-xl font-bold mb-2'>Oops! A slight hiccup.</p>
              <p>
                {error?.message ||
                  "We couldn't process your ticket purchase. Want to try again?"}
              </p>
              <button
                onClick={() => reset()}
                className='mt-4 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors duration-200'
              >
                Give it Another Shot
              </button>
            </div>
          </animated.div>
        )
      default:
        return null
    }
  }

  return (
    <Modal
      id='react-modal'
      ariaHideApp={false}
      isOpen={true}
      onRequestClose={onRequestClose}
      style={customStyles}
    >
      <div className='flex flex-col h-full'>
        <div className='p-6 flex-shrink-0'>
          <button
            onClick={onRequestClose}
            className='absolute top-0 right-0 flex items-center justify-center h-20 w-20 text-gray-500 hover:text-gray-700'
          >
            <Close className='w-6 h-6' />
          </button>

          <h2 className='text-2xl font-bold mb-6 text-center text-gray-800'>
            Buy Tickets - Round #{lotteryInfo?.gameNumber}
          </h2>
        </div>

        <div className='flex-grow overflow-y-auto px-6'>
          <div className='grid grid-cols-2 gap-4 mb-6'>
            <div className='bg-gray-50 border border-gray-100 rounded-lg p-4 flex flex-col items-center justify-center'>
              <EthereumCircle className='w-12 h-12 mb-2' />
              <h3 className='font-semibold mb-2 text-gray-600'>Prize Pool</h3>
              <p className='text-2xl font-bold'>{`${lotteryInfo?.prizePool || ''} ETH`}</p>
            </div>
            <div className='bg-gray-50 border border-gray-100 rounded-lg p-4 flex flex-col items-center justify-center'>
              <Timer className='w-12 h-12 mb-2' />
              <h3 className='font-semibold mb-2 text-gray-600'>Countdown</h3>
              <Countdown secondsUntilDraw={lotteryInfo?.secondsUntilDraw} />
            </div>
            <div className='bg-gray-50 border border-gray-100 rounded-lg p-4 flex flex-col items-center justify-center'>
              <TicketAlternative className='w-12 h-12 mb-2' />
              <h3 className='font-semibold mb-2 text-gray-600'>Tickets Sold</h3>
              <p className='text-2xl font-bold'>{lotteryInfo?.ticketsSold}</p>
            </div>
            <div className='bg-gray-50 border border-gray-100 rounded-lg p-4 flex flex-col items-center justify-center'>
              <EthereumCircle className='w-12 h-12 mb-2' />
              <h3 className='font-semibold mb-2 text-gray-600'>Your Balance</h3>
              <p className='text-2xl font-bold'>{`${balance?.formatted || '0'} ETH`}</p>
            </div>
          </div>

          <div className='space-y-6'>
            <div className='flex items-center justify-between'>
              <div className='flex items-center'>
                <svg
                  className='w-6 h-6 mr-2'
                  fill='currentColor'
                  viewBox='0 0 20 20'
                  xmlns='http://www.w3.org/2000/svg'
                >
                  <path d='M2 6a2 2 0 012-2h12a2 2 0 012 2v2a2 2 0 100 4v2a2 2 0 01-2 2H4a2 2 0 01-2-2v-2a2 2 0 100-4V6z' />
                  <path
                    fillRule='evenodd'
                    d='M4 4a2 2 0 00-2 2v1h16V6a2 2 0 00-2-2H4zm0 6h16v1a2 2 0 01-2 2H4a2 2 0 01-2-2v-1zm16-4h-16v2h16V6z'
                    clipRule='evenodd'
                  />
                </svg>
                <span>Number of tickets:</span>
              </div>
              <div className='flex items-center space-x-2'>
                <input
                  type='number'
                  min='1'
                  max='100'
                  value={ticketCount}
                  onChange={(e) => handleTicketCountChange(e.target.value)}
                  className='w-16 px-2 py-2 text-center border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500'
                />
              </div>
            </div>
            <div className='flex items-center justify-between'>
              <div className='flex items-center'>
                <svg
                  className='w-6 h-6 mr-2'
                  enableBackground='new 0 0 40 40'
                  viewBox='0 0 40 40'
                >
                  <g>
                    <path d='M9.1,26c-0.6,0-1-0.4-1-1s0.4-1,1-1c2,0,4-0.8,5.4-2.2c0.4-0.4,1-0.4,1.4,0s0.4,1,0,1.4C14.1,25,11.6,26,9.1,26z' />
                  </g>
                  <g>
                    <path d='M20,0C9,0,0,9,0,20c0,11,9,20,20,20c11,0,20-9,20-20C40,9,31,0,20,0z M20,38c-9.9,0-18-8.1-18-18c0-9.9,8.1-18,18-18   s18,8.1,18,18C38,29.9,29.9,38,20,38z' />
                    <path d='M31.8,25.8L29,28.6c-0.2,0.2-0.5,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3c-0.4-0.4-0.4-1,0-1.4l1.1-1.1h-2.3   c-2.6,0-5-1-6.8-2.8l-5-5c-1.4-1.4-3.4-2.2-5.4-2.2c-0.6,0-1-0.4-1-1s0.4-1,1-1c2.5,0,5,1,6.8,2.8l5,5c1.5,1.4,3.4,2.2,5.4,2.2h2.3   l-1.1-1.1c-0.4-0.4-0.4-1,0-1.4c0.4-0.4,1-0.4,1.4,0l2.8,2.8C32.2,24.7,32.2,25.4,31.8,25.8z' />
                    <path d='M31.8,15.7L29,18.5c-0.2,0.2-0.5,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3c-0.4-0.4-0.4-1,0-1.4l1.1-1.1h-2.3   c-2,0-4,0.8-5.4,2.2c-0.2,0.2-0.5,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3c-0.4-0.4-0.4-1,0-1.4c1.8-1.8,4.2-2.8,6.8-2.8h2.3l-1.1-1.1   c-0.4-0.4-0.4-1,0-1.4c0.4-0.4,1-0.4,1.4,0l2.8,2.8C32.2,14.6,32.2,15.3,31.8,15.7z' />
                  </g>
                </svg>
                <span>Auto-generate numbers:</span>
              </div>
              <label className='flex items-center cursor-pointer'>
                <div className='relative'>
                  <input
                    type='checkbox'
                    className='sr-only'
                    checked={isAutoGenerated}
                    onChange={() => setIsAutoGenerated(!isAutoGenerated)}
                  />
                  <div
                    className={`block w-10 h-6 rounded-full transition-colors duration-300 ease-in-out ${
                      isAutoGenerated ? 'bg-blue-500' : 'bg-gray-300'
                    }`}
                  ></div>
                  <div
                    className={`absolute left-1 top-1 bg-white w-4 h-4 rounded-full transition-transform duration-300 ease-in-out ${
                      isAutoGenerated ? 'transform translate-x-full' : ''
                    }`}
                  ></div>
                </div>
              </label>
            </div>
            {!isAutoGenerated && renderNumberInputs()}
          </div>
        </div>

        <div className='p-6 flex-shrink-0'>
          <div className='mb-4 text-center'>
            <span className='text-sm text-gray-500'>
              Total cost: {(ticketCount * Number(lotteryInfo?.ticketPrice || 0)).toFixed(2)} ETH
            </span>
          </div>
          <animated.button
            style={buttonAnimation}
            onClick={handlePurchase}
            disabled={transactionStatus === 'pending'}
            className='w-full py-4 bg-green-500 text-white font-semibold text-xl rounded-lg hover:bg-green-600 transition-colors duration-200 flex items-center justify-center disabled:opacity-50 disabled:cursor-not-allowed'
          >
            {transactionStatus === 'pending' ? 'Processing...' : 'Purchase Tickets'}
          </animated.button>
        </div>
      </div>
      {renderTransactionFeedback()}
    </Modal>
  )
}

export default Ticket
